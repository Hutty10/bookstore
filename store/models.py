from django.db import models
from django.urls import reverse
from django.utils.translation import gettext_lazy as _
from django.template.defaultfilters import slugify
from django.contrib.auth.models import User
from django.core.validators import MinValueValidator, MaxValueValidator
# Create your models here.


class BookManager(models.Manager):
    def get_queryset(self):
        return super(BookManager, self).get_queryset().filter(is_available=True)
    
    
class ReviewManager(models.Manager):
    def get_queryset(self):
        return super(ReviewManager, self).get_queryset().filter(is_active=True)


class Genre(models.Model):
    name = models.CharField(max_length=100, name=_("genre name"))
    slug = models.SlugField(_("The slug is autogenerated from the name"), max_lenth=225, unique=True, name=_("genre slug"), auto_created=True, null=True)
    
    class Meta:
        verbose_name = "Genre"
        verbose_name_plural = "Genres"

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.name)
        return super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse("gnere_detail", kwargs={"slug": self.slug})
    
    def __str__(self):
        return self.name
    
    
class Book(models.Model):
    genre = models.ForeignKey(Genre, verbose_name=_(""), on_delete=models.CASCADE, related_name='books')
    title = models.CharField(_("Book\'s title"), max_length=100)
    author = models.CharField(_("Book\'s author"), max_length=50)
    slug = models.SlugField(_("The slug is autogenerated from the title"), max_lenth=225, unique=True, name=_("book slug"), auto_created=True, null=True)
    cover_img_url = models.ImageField(_("cover image"), upload_to=None, height_field=None, width_field=None, max_length=None)
    book_url = models.FileField(_("Book\'s file"), upload_to=None, max_length=100)
    price = models.DecimalField(_("Book\'s price"), max_digits=5, decimal_places=2)
    discount_price = models.DecimalField(_("Book\'s discount price"), max_digits=5, decimal_places=2)
    is_available = models.BooleanField(default=True)
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    objects = models.Manager()
    books = BookManager()
    
    @property
    def total_rating(self):
        return self.reviews.all().count()
    
    @property
    def average_rating(self):
        return self.reviews.all().aggregate(models.Avg('rating')).get('rating__avg')
    
    class Meta:
        verbose_name = "Book"
        verbose_name_plural = "Books"
    
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        return super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse("model_detail", kwargs={"slug": self.slug})

    def __str__(self):
        return self.title
    
    
class Review(models.Model):
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    book = models.ForeignKey(Book, on_delete=models.CASCADE, related_name='reviews')
    rating = models.PositiveIntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)])
    comment = models.TextField(max_length=500)
    is_active = models.BooleanField(default=True)
    objects = models.Manager()
    reviews = ReviewManager()
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
    
    class Meta:
        verbose_name = "Review"
        verbose_name_plural = "Reviews"
    
    def __str__(self):
        return f'{self.rating} | {self.book} | {self.author}'